//要明白什么是指针，需要理解什么是内存。
//内存类比为中国陆地面积。内存为陆地面积，举例x32位的计算机：

// （1）32位是什么意思？
// 32位计算机意思是有32条数据线的计算机，每一个数据线会产生一个电位，正电与负电（1/0），
// 由这32位正负电位组成一个32位的二进制码。一共有2的32次方个不同的组合。这些不一样的二进制码就是一个地址。

//（2）什么是地址？
//  把一块内存划分一个一个的内存单元空间，类比把中国分为许多不同的城市。
//每一个城市就是一个单元空间。一个单元空间为1个字节。把2的32次方的不同二进制码分别放入一一对应的存储单元空间.
//其二进制码就是这个单元存储空间的地址。类比每一个城市的房子都有其详细地址，二进制码就相当于地址或门牌号。
//而在前面的scanf输入指令要在对象前加&这个符号。意思就是把设置好的变量的地址读取出来。&为取地址符号。

//取地址后想查看，int*类型的数据类型应该使用%p，而不是%d。

//（3）什么是指针？
//指针就是指针变量的意思。
//例如int a=1;意思是创建一个类型为int的整数，向内存申请一个四字节（int）大小的空间。
//命名为a，大小为1；把这个1放入一个存储单元空间中，该单元空间对应的二进制码就是这个a的地址。
// 而当我们需要把这个地址取出来保存起来，就用到了指针：指针就是用来储存地址的一种变量，接上例，当我们想用指针存储上面a的地址，
// 就需要利用指针,格式为int* p=& a;（int*类型+指针名称=取地址符+取地址对象）这样p就存储了a的地址。

//而当我们需要用这个存储起来的地址变量时，如改变这个变量大小。我们可以利用*--解引用操作符/间接引用操作符。
//利用上例，需要注意的是，利用*改变的是原来的变量a的值。而不是指针存储变量p的地址或者值。


//指针类型大小看计算机的位，32位机是4字节，64位机是8字节。因为指针存放地址，地址由数据线的正负电位数组成的二进制码决定。
//和它的数据类型无关。因为指针变量的数据类型是由存储地址的对象决定的。

#include <stdio.h>

int main()
{
	int a = 11;             //因为是int类型，申请一个4字节大小的内存空间。
	printf("%p\n", &a);
	
	int* p = &a;            //定义一个指针变量取出并存储a的地址。
							//同时注意int* p中，int*是一个整体。但是在解读时，*告诉内存，*后面的p是一个指针变量。
	                        //而这个变量的类型应该与想要存储的对象，即a的数据类型一致。如a的数据类型是int，所以才是int*p。

	printf("%p\n", p);     //利用取地址符输出a在内存中存储单元空间的地址。

	*p = 4;              //*利用解引用符修改a的地址
						//这里的*与上面的int*的*不一样。这里的*是操作符，上面的是语法形式。

	printf("%d\n", a);   //是改变了a的值，而不是地址。
	printf("%p\n", p);    //可以看到运行结果，p的地址未变，而a的值已经改变。

	int* q = &a;
	printf("%p", q);       //可以看到a的地址没有改变。

	return 0;
