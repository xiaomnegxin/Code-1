#include <stdio.h>



//int main()
//{
//	int all[5] = { 'a',98 };			//验证在数组中，根据不同数据类型，常数和字符通过可以通过ASCII码值互相转化。
//	char bll[5] = { 'a',98 };
//	printf("%d %d\n", all[0], all[1]);
//	printf("%d %d\n", bll[0], bll[1]);
//	return 0;
//}

//二维数组打印全元素，及其地址：

//int main()
//{
//	int i = 0;
//	int n = 0;
//	int all[3][4] = { {1,2,3},{4,5} };
//
//	for (i = 0; i< 3; i++)
//	{
//		for (n = 0; n < 4; n++)
//		{
//			printf("%d \n", all[i][n]);
//			printf("%p \n", &all[i][n]);
//
//		}
//		printf("\n");
//	}
//
//	return 0;
//}


//给一个数组，输出逆序
//冒泡排序：数据结构P242.		相邻两个数比较，然后交换位置，总规律是小的向左，大的向右。->从小到大

void  MP_all(int b_ll[], int n)
{
	//如果就这样写，如果数组并不完全无序，有可能运行到一半时已经有序，但是程序还是会遵从第一个for从头到尾继续执行。很浪费

	//优化：
	int flag = 1;		//定义一个变量；
	int i = 0;
	int e = 0;
	
	//冒泡的趟数
	for(i=0;i<n-1;i++)
	{
		//每一次的排序
		for (e = 0; e < n - 1 - i; e++)
		{
			if (b_ll[e] > b_ll[e + 1])
			{
				int m = b_ll[e];
				b_ll[e] = b_ll[e + 1];
				b_ll[e + 1] = m;
				flag = 0;				//flag定义为1，如果进入了这个循环，改成0；说明本次冒泡还未完全有序；程序可以继续循环。
			}
			if (flag == 0)			//当flag==0，说明上一次冒泡没有进去过判断，说明已经完全有序。
				break;
		}
	}
}

int main()
{

	int i = 0;
	//给一个正序数组
	int a_ll[] = { 9,8,7,6,5,4,3,2,1 };

	int n = sizeof(a_ll) / sizeof(a_ll[0]);
	//对其冒泡。
	MP_all(a_ll,n );

	//输出看看
	for (i = 0; i < n; i++)
		printf("%d ", a_ll[i]);
	return 0;
}
