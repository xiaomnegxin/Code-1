#include <stdio.h>

//for循环：
//for循环格式：
//for（初始化；判断条件；操作） ->若没有要求可以空掉，但是格式必须是（；；），
//特殊的是判断部分省略的话，判断条件恒为真，会死循环。
//{
//	内容
//}

//1.不要在for循环内修改变量的数据。容易死循环。

//2.for循环里最好采用前闭后开的写法：
//比如从0开始，打印1到9：两种写法：for(i=1;i<10;i++);和for(i=1;i<=9;i++)选用前一种，这样与要求的数据大小一致，方便代码的易懂。

//3.不要随便省略（）内的三个条件
//例子1：
//本意会输出100个hehe，但是因为省略了i和j的初始化，所以导致在i=1时，j从1运行到了10后返回i，当i=2时，j本身等于10并未做初始化，
//所以j还是等于10，j<10条件不成立，所以第二次10循环开始已经不会运行了。
//int main()
//{
//	int i = 0;
//	int j = 0;
//	for (; i < 10; i++)
//	{
//		for (; j < 10; j++)
//		{
//			printf("hehe");
//		}
//	}
//
//	for (i = 0, j = 0; i = 0; i++, j++)		//判断条件i=0是赋值，不是等于==，所以在C中，0为假，循环不进去。
//		i++;								//不输出任何东西。
//	return 0;
//}


//do   while循环：
//1.与while循环的区别是先执行do一次，也就是至少执行一次。
//2.格式是do{内容}while（判断条件）；



//练习：

//1.计算n的阶乘。

//int main()
//{
//	int n = 0;
//	int i = 0;
//	int num = 1;
//	scanf("%d", &n);
//	for (i=n; i >0; i-- )
//	{
//		num = num * i;
//
//	}
//	printf("%d", num);
//
//
//	return 0;
//}


//2.计算1到10的阶乘之和。

//int main()
//{
//	int n = 0;
//	int i = 0;
//	int num = 1;
//	int sum=0;
//	
//	for (i=1; i<=4; i++)		//1-10的阶乘。
//	{
//		for (n=1; n <=i; n++)	//求一个n的阶乘。
//		{
//			num = num * n;
//		}
//		sum = sum + num;		//多个n的累加。
//		num = 1;				//**********重要！需要给num进行初始化赋值，否则（83）的num将会在保留前一次阶乘运算的情况下运行。
// }
//
//	printf("%d", sum);
//
//	return 0;
//}



//3.

//a.蠢办法

//int main()
//{
//	int a[] = { 0,1,2,3,4,5,6,7,8,9 };
//	int p = 4;
//	int i = 0;
//	int b = sizeof(a) / sizeof(a[0]);
//	for(i=0;i<b;i++)
//	{
//		if (p == a[i])
//			printf("找到了");
//	}
//
//
//	return 0;
//}

//b.二分法

int main()
{
	int a[] = { 1,2,3,4,5,6,8,9,10,11 };
	int left = 0;						//定义左下标
	int err = sizeof(a) / sizeof(a[0]); //计算数组内数据的个数。
	int right = err - 1;				//因为下标从零开始，所以右下标等于个数-1；
	int p = 0;
	int mid = 0;
	scanf("%d", &p);
	
	//while(a[mid]!=p)	用目标值与查找值是否相等来判断是错的，因为有可能出现查找值不在该数组的情况。
	while(left<=right)
	{
		mid=(left + right) / 2;			//计算中间下标。
		if (a[mid] < p)
			left = mid + 1;				//如果小于目标，证明目标数更大，则左端都比目标小，舍弃。左下标+1，
		//表示新的左下标数比中间大一位；
		else if (a[mid] > p)			//与左下标同理;
			right = mid - 1;
		else 
		{
			printf("%d", a[mid]);
			break;
		}
	}
	if (left > right)					//补充数据不在该数组的显示说明。
		printf("找不到");
	return 0;
}
