#include <stdio.h>


//1.计算1到100出现9的次数

//分析：
//让1到100的每一个位数，都和9比较，看看是否相等，相等计数器+1。
//拆分数字n的每一个位数：个十百。


//分为三种数：n<10; n>=10&&n<100; n=100（就是0~9；10~99；100）

//(1)对于n<10:
//个位：n%10；

//(2)对于n>=10&&n<100：
//个位：n%10；
//十位：n/10；


//个人方法：暴力拆分。这种把数按位数分成两种类型，并把位数拆分出来的算法太复杂了，是蠢办法。
//int main()
//{
//	int i = 1;
//	int a = 0;
//	int b = 0;
//	int max = 0;
//	for (i = 1; i <100; i++)
//	{
//		if (i < 10)							//计算0~9的9出现的次数
//		{
//			a = i ;
//			if (a == 9)
//			{
//				max++;
//			}
//			
//		}
//		if (i>= 10 && i< 100)				//计算10~99的9的出现的次数。
//		{
//			a = i % 10;						//拆分个位数.
//			b = i / 10;						//拆分十位数.
//			if ((a == 9||b==9) )
//			{
//				max++;
//			}
//			if (a == 9 && b == 9)
//			{
//				max++;
//			}
//			i = 10 * b + a;			//把i拆解后需要加回来重新组成原数。
//		}
//		
//	}
//	
//	printf("%d", max);
//	return 0;
//}


//参考方法：直接判断n的个位数是否等于9，是的话次数+1；再直接判断n的十位数是否等于9，是的话次数+1。

//代码实现：

//int main()
//{
//	int i = 0;
//	int max = 0;
//	for (i = 1; i < 100; i++)
//	{
//		if (i % 10 == 9)
//		{
//			max++;
//		}
//		if (i / 10 == 9)		//这里接if而不是接else if是因为else if与if存在上下级关系，如果if生效了，else if会被跳过
//		{
//			max++;
//		}
//		
//	}
//	printf("%d", max);
//	return 0;
//}


//2.计算1/1-1/2+1/3-1/4+...+1/99-1/100的值

//分析：很明显是分数的加减法。两个规律：正负号规律交替，以及分数都是分子不变，分母+1;
//规律数的加减法，可以用循环做；正负值的变化可以用取反。分母可以用n++。

//方案：

//int main()
//{
//	int i = 0;
//	double sum = 0.0;
//	int n = 1;
//	for (i = 1; i <= 100; i++)
//	{
//		sum += n*1.0/i;				
//		n = -n;
//	}
//	printf("%lf", sum);
//	return 0;
//}



//3.求最大值：10个数里的最大值。

//分析：第一步给十个数；第二步判断数的大小；最后输出最大值。


//int main()
//{
//	int arr[10] = { -1,2,3,-4,5,-6,7,8,9,-10 };
//	//int max = 0;					//缺陷一：如果数组的十个数都小于max的初始化的值，这个程序就出问题了。
//	int max=arr[0];								//所以max可以用arr的一个元素作为初始值。
//	int i = 0;
//	for(i=0;i<=10;i++)
//	{
//		if (max < arr[i])
//		{
//			max = arr[i];
//		}
//	}
//	printf("%d", max);
//	return 0;
//}



//4.写一个9*9乘法口诀表。

//分析乘法口诀表的共同点：a*b=值；值可以通过乘法自动得出。a和b是变量。可以用for控制a和b的累加。
//两个点：一个是当b>a时，换行；一个是换行后，a+1。
//int main()
//{
//	int a = 0;
//	int b = 0;
//
//	for (a = 1; a <= 9; a++)
//	{
//		for (b = 1; b <= a; b++)
//		{
//			//printf("%d*%d=%d ", a, b, a * b);
//			//printf("%d*%d=%2d ", a, b, a * b);	 //因为输出结果有一位数和两位数，可以用%2d来补空格。加的2表示位数。
//			printf("%d*%d=%-2d ", a, b, a * b);	 //在%d中间加上负号，表示左对齐。
//		}
//		printf("\n");
//	}
//	return 0;
//}




//小游戏：猜数字；

//分析：
// 可以加上一些游戏的小功能
// **：开始菜单。
// 
//1.生成一个随机数。
//2.玩家输入一个数。
//3.判定大了小了还是相等，输出相应提示；如果正确，游戏结束。
//4.没对重新输入一个数，重复流程。
//
//
//#include <stdlib.h>
//
//#include <time.h>			//库函数time的头文件。
//
//void eer()		//定义函数表示游戏菜单
//{
//	printf("*****************************\n");
//	printf("****1.开始游戏 0.退出游戏****\n");
//	printf("*****************************\n");
//}
//
//void game()
//{
//	//如何生成一个随机数呢？时间戳;
//	int ret = 0;
//	int n = 0;
//
//	ret=rand()%100+1;	//rand生成随机数的范围是0到32767；想取0到100；
//	
//	while (1)			//对于判断条件，取1时代表非0，所以恒为真，循环会一直循环，可以在循环中用break跳出该循环。
//	{
//		printf("请输入你的数字：");
//		scanf("%d", &n);
//		if (n > ret)
//			{
//				printf("你猜想的数字大了。\n");
//				printf(" \n");
//				
//			}
//		else if (n < ret)
//			{
//				printf("你猜想的数字小了。\n");
//				printf(" \n");
//				
//			}
//		else
//		{
//			printf("你猜对了\n");
//			printf(" \n");
//			printf(" \n");
//			break;
//
//		}
//
//	} 
//
//	
//}
//	
//
//int main()
//{
//	int a = 0;
//	srand((unsigned int)time(NULL));
//	
//	do
//	{
//		eer();
//		printf("请选择：");
//		scanf("%d", &a);
//		switch (a)
//		{
//		case 1:
//			game();
//			printf(" \n");			//空行，让连续运行的时候没有这么密集。
//			printf(" \n");
//			printf(" \n");
//			break;
//		case 0:
//			printf("退出游戏");
//			break;
//		default:
//			printf("输入错误！");
//			break;
//		}
//	} while (a);
//
//	return 0;
//}





//有趣小程序：设置关机。

//#include <string.h>
//#include <stdlib.h>
//int main()
//{
//	char arr[20] = {0};
//	system("shutdown - s - t 60");
//	printf("请注意 ，你的电脑将在60秒后关机\n如果想取消，请输入哦取消该操作。");
//	scanf("%s", &arr);
//
//	if (strcmp(arr, "哦") == 0)
//	{
//		printf("已经取消关机。");
//		system("shutdown - a");
//	}
//
//	return 0;
//}
