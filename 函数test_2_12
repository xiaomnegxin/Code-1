#include <stdio.h>


//复习：函数实现加法。

//注意：自定义函数返回的值必须赋值给一个对象，否则返回了无法保存，等于没有用上这个函数。
//如 int a = Add(x,y);
//同时不要忘记return 。单一的返回值有时候可以用return+表达式。

//int arr(int x,int y)
//{
//	int x = 0;
//	int y = 1;
//	int sum = a + b;
//
//}
//int  main()
//{
//	int sum = 0;
//	sum=arr(a,b);
//	printf("%d", sum);
//	return 0;
//}



//关于库函数。

//例1.字符串函数：strcpy;
//查询库函数网页自己尝试理解各种函数的用法。

//例2.内存内容覆盖函数：memset;
//


//#include <string.h>
//int main()
//{
//	char arr[] = { "hello string" };
//	char act[40] = {1};
//	char app[40] = { "dasd" };
//	strcpy(act, arr);
//	strcpy(app, "hello string");
//	memset(app,'**',6 );				//格式为memset(对象,内容,覆盖长度)；
//	printf("%s\n%s\n%s\n", arr, act, app);
//	return 0;
//}



//关于自定义函数

//例1
//自定义一个函数，实现输出两个数的最大值；

//int MAX(int x, int y)
//{
//	return  x > y ? x : y;
//	
//}
//
//int main()
//{
//	int x = 0;
//	int y = 0;	
//	scanf("%d%d", &x, &y);
//	int max = MAX(x,y);
//	printf("%d", max);
//	return 0;
//}


//void类型的自定义函数

//例1：交换两个值。

// void jh1(int x, int y)		//传入的是a，b的值；------>形参
//{
//	int p = 0;
//	p = x;
//	x = y;
//	y = p;
//}
//
// void jh2(int* x, int* y)		//传入的是a，b的地址；----->实参
// {								//注意，传进去的是地址，接受的变量就要是指针变量。这样两个变量就等于jh2（a，b）直接把ab的地址传进去了。
//	 int z = 0;
//	 z = *x;
//	 *x = *y;
//	 *y = z;
//
//
// }
//
//int main()
//{
//	//int a = 5;
//	//int b = 6;
//	//int x = 0;
//	//
//	//scanf("%d%d", &a, &b);
//
//	//jh1(a,b);
//	//a = x;				//发现x没有继承函数中完成了交换后的x的值，而是定义时的0.说明函数有独立性。
//	//
//	//printf("a=%d\nb=%d", a, b);		//同时发现b的值没有改变。
//	//								//发现，在函数中创建了x，y两个变量，他们的地址与a，b是不一样的；
//	//								//所以当a，b的值传到x，y的内存中时，x和y在它们所在的内存中完成了值的交换，与a，b无关。
//	//								//所以函数执行完，xy交换了值，ab的值没变					
//	//return 0;
//
//
//	//说明，想在函数体中完成ab的值的交换，就要让交换发生在ab的内存地址中，所以我们可以把ab的地址，传入函数体，xy在ab的内存中完成交换。
//
//	int a = 1;
//	int b = 9;
//	scanf("%d%d", &a, &b);
//
//	jh2(&a, &b);
//
//	printf("%d\n%d", a, b);
//
//}



//练习1：写一个函数，功能是判断100-200内的素数。

int arr(int x)
{
	int a = 0;
	for(a=2;a<x;a++)
	{
		if (x % a == 0)
		{
			return 0;
		}
			
	}
	return 1;
}

int main()
{
	int i= 0;
	for (i = 100; i <=200; i++)
	{
		if (arr(i) == 1)
			printf("%d\n", i); 
		
	}
	return 0;
}
